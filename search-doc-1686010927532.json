[{"title":"Types","type":0,"sectionRef":"#","url":"/sketch/api/Types","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Types","url":"/sketch/api/Types#types","content":" "},{"title":"SketchbookStatus​","type":1,"pageTitle":"Types","url":"/sketch/api/Types#SketchbookStatus","content":"&lt;/&gt; type SketchbookStatus = &quot;Alive&quot; | &quot;Hidden&quot; | &quot;Dead&quot; The current status of the sketchbook, with Alive - default state, indicates sketchbook is currently rendered on the screen Hidden - sketchbook is not rendered on the screen, but still exists in memory Dead - sketchbook is not rendered on the screen, and has been removed from memory  "},{"title":"DrawingType​","type":1,"pageTitle":"Types","url":"/sketch/api/Types#DrawingType","content":"&lt;/&gt; type DrawingType = &quot;Line&quot; | &quot;Circle&quot; | &quot;Rectangle&quot; | &quot;Triangle&quot; | &quot;Text&quot;   "},{"title":"Array<T>​","type":1,"pageTitle":"Types","url":"/sketch/api/Types#Array<T>","content":"&lt;/&gt; type Array&lt;T&gt; = {[number]: T}   "},{"title":"Callback​","type":1,"pageTitle":"Types","url":"/sketch/api/Types#Callback","content":"&lt;/&gt; type Callback = () → ()   "},{"title":"Connection​","type":1,"pageTitle":"Types","url":"/sketch/api/Types#Connection","content":"&lt;/&gt; type Connection = RBXScriptConnection | Instance | Callback   "},{"title":"Connections​","type":1,"pageTitle":"Types","url":"/sketch/api/Types#Connections","content":"&lt;/&gt; type Connections = Array&lt;Connection&gt;  "},{"title":"Sketchbook","type":0,"sectionRef":"#","url":"/sketch/api/Sketchbook","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Sketchbook","url":"/sketch/api/Sketchbook#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Sketchbook","url":"/sketch/api/Sketchbook#new","content":"&lt;/&gt; Sketchbook.new() → Sketchbook Creates a new sketchbook.  "},{"title":"isDrawingRegistered​","type":1,"pageTitle":"Sketchbook","url":"/sketch/api/Sketchbook#isDrawingRegistered","content":"&lt;/&gt; Sketchbook:isDrawingRegistered(drawing: Drawing-Thedrawingtocheckfor) → boolean Gets whether the sketchbook has the provided drawing registered within itself.  "},{"title":"getDrawings​","type":1,"pageTitle":"Sketchbook","url":"/sketch/api/Sketchbook#getDrawings","content":"&lt;/&gt; Sketchbook:getDrawings() → Array&lt;Drawing&gt; Gets all drawings registered to the sketchbook.  "},{"title":"setHidden​","type":1,"pageTitle":"Sketchbook","url":"/sketch/api/Sketchbook#setHidden","content":"&lt;/&gt; Sketchbook:setHidden( hidden: boolean-- Whether the sketchbook should be hidden or not ) → () Sets the state of the sketchbook to be hidden or not. "},{"title":"Errors","type":1,"pageTitle":"Sketchbook","url":"/sketch/api/Sketchbook##","content":"Type\tDescription&quot;Cannot set status of dead sketchbook&quot;\tThe sketchbook is dead  "},{"title":"getStatus​","type":1,"pageTitle":"Sketchbook","url":"/sketch/api/Sketchbook#getStatus","content":"&lt;/&gt; Sketchbook:getStatus() → SketchbookStatus-- The status of the sketchbook Gets the status of the sketchbook.  "},{"title":"cleanup​","type":1,"pageTitle":"Sketchbook","url":"/sketch/api/Sketchbook#cleanup","content":"&lt;/&gt; Sketchbook:cleanup() → () Cleans up the sketchbook, removing all drawings and connections. "},{"title":"Renderer","type":0,"sectionRef":"#","url":"/sketch/api/Renderer","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Renderer","url":"/sketch/api/Renderer#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Renderer","url":"/sketch/api/Renderer#new","content":"&lt;/&gt; Renderer.new( drawing: Drawing,-- The drawing to render drawingType: DrawingType-- The type of drawing to render ) → Renderer-- The new renderer Create a new renderer instance for the given drawing.  "},{"title":"render​","type":1,"pageTitle":"Renderer","url":"/sketch/api/Renderer#render","content":"&lt;/&gt; Renderer:render( drawing: Drawing-- The drawing to render ) → Instance -- The rendered drawing Render the drawing in the world. "},{"title":"Errors","type":1,"pageTitle":"Renderer","url":"/sketch/api/Renderer##","content":"Type\tDescription&quot;Abstract method not implemented&quot;\tThis method must be implemented by subclasses  "},{"title":"cleanup​","type":1,"pageTitle":"Renderer","url":"/sketch/api/Renderer#cleanup","content":"&lt;/&gt; Renderer:cleanup() → () Clean up the renderer. "},{"title":"Drawing","type":0,"sectionRef":"#","url":"/sketch/api/Drawing","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Drawing","url":"/sketch/api/Drawing#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Drawing","url":"/sketch/api/Drawing#new","content":"&lt;/&gt; Drawing.new( sketchbook: Sketchbook,-- The sketchbook to create the drawing in type: DrawingType-- The type of the drawing ) → Drawing Creates a new drawing.  "},{"title":"getSketchbook​","type":1,"pageTitle":"Drawing","url":"/sketch/api/Drawing#getSketchbook","content":"&lt;/&gt; Drawing:getSketchbook() → Sketchbook Get the sketchbook the drawing is in.  "},{"title":"cleanup​","type":1,"pageTitle":"Drawing","url":"/sketch/api/Drawing#cleanup","content":"&lt;/&gt; Drawing:cleanup() → () Cleans up the drawing, removing it from the sketchbook, cleaning up the renderer, and disconnecting all events. "},{"title":"Sketch","type":0,"sectionRef":"#","url":"/sketch/api/Sketch","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Sketch","url":"/sketch/api/Sketch#types","content":" "},{"title":"Status​","type":1,"pageTitle":"Sketch","url":"/sketch/api/Sketch#Status","content":"enum &lt;/&gt; interface Status { Alive: &quot;Alive&quot;-- The sketchbook is alive and visible in the world Hidden: &quot;Hidden&quot;-- The sketchbook is hidden and cannot be seen in the world Dead: &quot;Dead&quot;-- The sketchbook is dead and can no longer be used } An enum value to represent a sketchbook's status. "},{"title":"Functions​","type":1,"pageTitle":"Sketch","url":"/sketch/api/Sketch#functions","content":" "},{"title":"createSketchbook​","type":1,"pageTitle":"Sketch","url":"/sketch/api/Sketch#createSketchbook","content":"&lt;/&gt; Sketch.createSketchbook() → Sketchbook Creates a sketchbook that can then contain other sketchable objects. local sketchbook: Sketch.Sketchbook = Sketch.createSketchbook()   "},{"title":"drawText​","type":1,"pageTitle":"Sketch","url":"/sketch/api/Sketch#drawText","content":"&lt;/&gt; Sketch.drawText( sketchbook: Sketchbook,-- The sketchbook to draw the text on text: Computable&lt;string&gt;,-- The text to draw position: Computable&lt;Vector3 &gt;?,-- The position to draw the text at size: Computable&lt;number&gt;?,-- The size of the text color: Computable&lt;Color3 &gt;?,-- The color to draw the text in font: Computable&lt;Font &gt;?,-- The font to draw the text with transparency: Computable&lt;number&gt;?-- The transparency to draw the text with ) → Drawing Creates a new text drawing and registers it in the provided sketchbook. -- Create computables for the position, text, and color; -- Computables can either be a static value or a function that will be called every render call local position: Computable&lt;Vector3&gt; = Vector3.new(0, 0, 0) local text: Computable&lt;string&gt; = function() return &quot;Hello, world!&quot; end local color: Computable&lt;Color3&gt; = Color3.new(1, 1, 1) -- Create a new sketchbook and drawing local sketchbook: Sketchbook = Sketch.createSketchbook() local drawing: Drawing = Sketch.drawText(sketchbook, text, position, color) -- Render the sketchbook (and, in turn, all of its drawings) to the screen Sketch.render(sketchbook)   "},{"title":"drawLine​","type":1,"pageTitle":"Sketch","url":"/sketch/api/Sketch#drawLine","content":"unreleased &lt;/&gt; Sketch.drawLine( sketchbook: Sketchbook,-- The sketchbook to draw the text on point1: Computable&lt;Vector3 &gt;,-- The first point to draw the line between point2: Computable&lt;Vector3 &gt;,-- The second point to draw the line between color: Computable&lt;Color3 &gt;,-- The color to draw the line in thickness: Computable&lt;number&gt;-- The thickness of the line ) → Drawing Creates a new line drawing and registers it in the provided sketchbook. -- Create computables for the initial point XYZ, secondary point XYZ, color, and thickness; -- Computables can either be a static value or a function that will be called every render call local point1: Computable&lt;Vector3&gt; = function() return Vector3.new(0, math.sin(tick()), 0) end local point2: Computable&lt;Vector3&gt; = Vector3.new(1, math.cos(tick()), 0) local color: Computable&lt;Color3&gt; = Color3.new(1, 1, 1) local thickness: Computable&lt;number&gt; = 1 -- Create a new sketchbook and drawing local sketchbook: Sketchbook = Sketch.createSketchbook() local drawing: Drawing = Sketch.drawLine(sketchbook, text, point1, point2, color, thickness) -- Render the sketchbook (and, in turn, all of its drawings) to the screen Sketch.render(sketchbook) warning This feature has not yet been implemented, as the Line drawing type is not yet supported.  "},{"title":"render​","type":1,"pageTitle":"Sketch","url":"/sketch/api/Sketch#render","content":"&lt;/&gt; Sketch.render( sketchbook: Sketchbook-- The sketchbook to render ) → nil Renders a sketchbook to the screen. Although not necessary, it is recommended that this function be called each frame instead of manually after each change to the sketchbook or its drawings. local sketchbook = Sketch.createSketchbook() local drawing = Sketch.drawText(sketchbook, function() return &quot;Hello, world!&quot; end, Vector3.new(0, 5, 0), Color3.new(1, 1, 1)) Sketch.render(sketchbook)   "},{"title":"removeDrawing​","type":1,"pageTitle":"Sketch","url":"/sketch/api/Sketch#removeDrawing","content":"&lt;/&gt; Sketch.removeDrawing( sketchbook: Sketchbook,-- The sketchbook to remove the drawing from drawing: Drawing-- The drawing to remove ) → nil Removes a drawing from a sketchbook. This function should be called when you are done with a drawing and no longer want it to be rendered or used. "}]