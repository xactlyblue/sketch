"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[785],{25174:e=>{e.exports=JSON.parse('{"functions":[{"name":"createSketchbook","desc":"Creates a sketchbook that can then contain other sketchable objects.\\n\\n```lua\\nlocal sketchbook: Sketch.Sketchbook = Sketch.createSketchbook()\\n```","params":[],"returns":[{"desc":"","lua_type":"Sketchbook"}],"function_type":"static","source":{"line":777,"path":"src/init.luau"}},{"name":"drawText","desc":"Creates a new text drawing and registers it in the provided sketchbook.\\n\\n```lua\\n-- Create computables for the position, text, and color;\\n-- Computables can either be a static value or a function that will be called every render call\\nlocal position: Computable<Vector3> = Vector3.new(0, 0, 0)\\nlocal text: Computable<string> = function()\\n\\treturn \\"Hello, world!\\"\\nend\\nlocal color: Computable<Color3> = Color3.new(1, 1, 1)\\n\\n-- Create a new sketchbook and drawing\\nlocal sketchbook: Sketchbook = Sketch.createSketchbook()\\nlocal drawing: Drawing = Sketch.drawText(sketchbook, text, position, color)\\n\\n-- Render the sketchbook (and, in turn, all of its drawings) to the screen\\nSketch.render(sketchbook)\\n```","params":[{"name":"sketchbook","desc":"The sketchbook to draw the text on","lua_type":"Sketchbook"},{"name":"text","desc":"The text to draw","lua_type":"Computable<string>"},{"name":"position","desc":"The position to draw the text at","lua_type":"Computable<Vector3>?"},{"name":"size","desc":"The size of the text","lua_type":"Computable<number>?"},{"name":"color","desc":"The color to draw the text in","lua_type":"Computable<Color3>?"},{"name":"font","desc":"The font to draw the text with","lua_type":"Computable<Font>?"},{"name":"transparency","desc":"The transparency to draw the text with","lua_type":"Computable<number>?"}],"returns":[{"desc":"","lua_type":"Drawing"}],"function_type":"static","source":{"line":811,"path":"src/init.luau"}},{"name":"drawLine","desc":"Creates a new line drawing and registers it in the provided sketchbook.\\n\\n```lua\\n-- Create computables for the initial point XYZ, secondary point XYZ, color, and thickness;\\n-- Computables can either be a static value or a function that will be called every render call\\nlocal point1: Computable<Vector3> = function()\\n\\treturn Vector3.new(0, math.sin(tick()), 0)\\nend\\nlocal point2: Computable<Vector3> = Vector3.new(1, math.cos(tick()), 0)\\nlocal color: Computable<Color3> = Color3.new(1, 1, 1)\\nlocal thickness: Computable<number> = 1\\n\\n-- Create a new sketchbook and drawing\\nlocal sketchbook: Sketchbook = Sketch.createSketchbook()\\nlocal drawing: Drawing = Sketch.drawLine(sketchbook, text, point1, point2, color, thickness)\\n\\n-- Render the sketchbook (and, in turn, all of its drawings) to the screen\\nSketch.render(sketchbook)\\n```\\n\\n:::warning\\nThis feature has not yet been implemented, as the `Line` drawing type is not yet supported.\\n:::","params":[{"name":"sketchbook","desc":"The sketchbook to draw the text on","lua_type":"Sketchbook"},{"name":"point1","desc":"The first point to draw the line between","lua_type":"Computable<Vector3>"},{"name":"point2","desc":"The second point to draw the line between","lua_type":"Computable<Vector3>"},{"name":"color","desc":"The color to draw the line in","lua_type":"Computable<Color3>"},{"name":"thickness","desc":"The thickness of the line","lua_type":"Computable<number>"}],"returns":[{"desc":"","lua_type":"Drawing\\r\\n"}],"function_type":"static","unreleased":true,"source":{"line":883,"path":"src/init.luau"}},{"name":"render","desc":"Renders a sketchbook to the screen. Although not necessary, it is recommended that this function\\nbe called each frame instead of manually after each change to the sketchbook or its drawings.\\n\\n```lua\\nlocal sketchbook = Sketch.createSketchbook()\\nlocal drawing = Sketch.drawText(sketchbook, function()\\n\\treturn \\"Hello, world!\\"\\nend, Vector3.new(0, 5, 0), Color3.new(1, 1, 1))\\n\\nSketch.render(sketchbook)\\n```","params":[{"name":"sketchbook","desc":"The sketchbook to render","lua_type":"Sketchbook"}],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"static","source":{"line":903,"path":"src/init.luau"}},{"name":"removeDrawing","desc":"Removes a drawing from a sketchbook. This function should be called when you are done with a drawing and no longer\\nwant it to be rendered or used.","params":[{"name":"sketchbook","desc":"The sketchbook to remove the drawing from","lua_type":"Sketchbook"},{"name":"drawing","desc":"The drawing to remove","lua_type":"Drawing"}],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"static","source":{"line":923,"path":"src/init.luau"}}],"properties":[],"types":[{"name":"Status","desc":"An enum value to represent a sketchbook\'s status.","fields":[{"name":"Alive","lua_type":"\\"Alive\\"","desc":"The sketchbook is alive and visible in the world"},{"name":"Hidden","lua_type":"\\"Hidden\\"","desc":"The sketchbook is hidden and cannot be seen in the world"},{"name":"Dead","lua_type":"\\"Dead\\"","desc":"The sketchbook is dead and can no longer be used"}],"tags":["enum"],"source":{"line":740,"path":"src/init.luau"}}],"name":"Sketch","desc":"This is the API that used to create and modify drawings. It\'s essentially a wrapper that allows for\\neasy creation of drawings and sketchbooks to hold said drawings.\\n\\n```lua\\nlocal Sketch = require(\\"?\\")\\n\\nlocal sketchbook: Sketch.Sketchbook = Sketch.createSketchbook()\\nlocal drawing: Sketch.Drawing = Sketch.drawText(sketchbook, \\"Hello, world!\\")\\n\\nSketch.render(sketchbook)\\n\\n-- \ud83c\udf89 Tada, you\'ve created and rendered a drawing! \\n-- Also, although not necessary, it\'s **highly** recommended you call the Sketch.render(...) function each frame as opposed to manually after you make changes)\\n```","source":{"line":758,"path":"src/init.luau"}}')}}]);